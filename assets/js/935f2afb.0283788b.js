"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Syllabus","href":"/10020/notes/introduction","docId":"introduction"},{"type":"category","label":"Sorting Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Bubble Sort","href":"/10020/notes/sorting-algorithms/bubble-sort","docId":"sorting-algorithms/bubble-sort"},{"type":"link","label":"Insertion Sort","href":"/10020/notes/sorting-algorithms/insertion-sort","docId":"sorting-algorithms/insertion-sort"},{"type":"link","label":"Binary Heap","href":"/10020/notes/sorting-algorithms/binary-heap","docId":"sorting-algorithms/binary-heap"}],"href":"/10020/notes/category/sorting-algorithms"}]},"docs":{"introduction":{"id":"introduction","title":"Syllabus","description":"This page summarises the links to all notes that are relevant to 10.020. Please read them carefully by the weeks stipulated. You will learn each of the big topics above in the following weeks:","sidebar":"tutorialSidebar"},"sorting-algorithms/binary-heap":{"id":"sorting-algorithms/binary-heap","title":"Binary Heap","description":"Binary heap is a complete binary tree-based data structure that satisfies the heap property, where the key of each parent node is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the keys of its child nodes.","sidebar":"tutorialSidebar"},"sorting-algorithms/bubble-sort":{"id":"sorting-algorithms/bubble-sort","title":"Bubble Sort","description":"Bubble sort is a simple comparison-based sorting algorithm that repeatedly swaps adjacent elements until the list is sorted.","sidebar":"tutorialSidebar"},"sorting-algorithms/insertion-sort":{"id":"sorting-algorithms/insertion-sort","title":"Insertion Sort","description":"Insertion sort is a comparison-based sorting algorithm that builds the final sorted array one element at a time by inserting each element into its correct position within the already sorted portion of the array.","sidebar":"tutorialSidebar"}}}')}}]);