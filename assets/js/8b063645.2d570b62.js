"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[2542],{5756:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=a(7462),i=(a(7294),a(3905)),s=(a(1694),a(3707),a(6533),a(505));const r={sidebar_position:4},o="Week 4: OOP",l={unversionedId:"learning-objectives/oop",id:"learning-objectives/oop",title:"Week 4: OOP",description:"- Create class definitions with initialization and other methods",source:"@site/about/learning-objectives/04-oop.md",sourceDirName:"learning-objectives",slug:"/learning-objectives/oop",permalink:"/10020/about/learning-objectives/oop",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Week 3: Divide and Conquer",permalink:"/10020/about/learning-objectives/divide-conquer"},next:{title:"Week 5: Searching Data",permalink:"/10020/about/learning-objectives/searching-data"}},p={},c=[{value:"Concept Map",id:"concept-map",level:3}],u={toc:c},d="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"week-4-oop"},"Week 4: OOP"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create ",(0,i.kt)("inlineCode",{parentName:"li"},"class")," definitions with initialization and other methods"),(0,i.kt)("li",{parentName:"ul"},"Create ",(0,i.kt)("strong",{parentName:"li"},"stored")," property and ",(0,i.kt)("strong",{parentName:"li"},"computed")," property"),(0,i.kt)("li",{parentName:"ul"},"Draw UML class diagram of a class with attributes and methods"),(0,i.kt)("li",{parentName:"ul"},"Explain ",(0,i.kt)("inlineCode",{parentName:"li"},"has-a")," relationship"),(0,i.kt)("li",{parentName:"ul"},"Discuss object ",(0,i.kt)("strong",{parentName:"li"},"aliasing")," and ",(0,i.kt)("strong",{parentName:"li"},"copying")),(0,i.kt)("li",{parentName:"ul"},"Draw UML class diagram for ",(0,i.kt)("inlineCode",{parentName:"li"},"has-a")," relationship"),(0,i.kt)("li",{parentName:"ul"},"Implement abstract data type for ",(0,i.kt)("strong",{parentName:"li"},"Stack"),", ",(0,i.kt)("strong",{parentName:"li"},"Queue")," using Object Oriented paradigm"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Apply")," Stack and Queue for some applications"),(0,i.kt)("li",{parentName:"ul"},"Implement Queue using double ",(0,i.kt)("strong",{parentName:"li"},"Stack")," and discuss implementation ",(0,i.kt)("strong",{parentName:"li"},"impact")," on computation time")),(0,i.kt)(s.Z,{mdxType:"ChatBaseBubble"}),(0,i.kt)("h3",{id:"concept-map"},"Concept Map"),(0,i.kt)("mermaid",{value:"flowchart TD\n    A((Week 4<br>Object Oriented<br>Programming)) --\x3e |uses| O((Object))\n    style A color:red\n    O --\x3e |defined in| C((Class))\n    O --\x3e |has| R((Relationship))\n    O --\x3e |creates| OI((Object Instance))\n    O --\x3e |has| M((Methods))\n    O --\x3e |has| ATTR((Attributes))\n    UML((UML)) --\x3e |represents| C\n    UML --\x3e |describes| R\n    R --\x3e |can be| HA((has-a))\n    R --\x3e |can be| IA((is-a))\n    OI --\x3e |reference| ALIAS((Aliasing))\n    HA --\x3e |called| COMP((Composition))\n    IA --\x3e |called| INH((Inheritance))\n    M --\x3e |can be| SM((Special Methods))\n    POP((POP)) --\x3e |is a| M\n    PUSH((PUSH)) --\x3e |is a| M\n    STACK((Stack)) --\x3e |implemented as| O\n    STACK --\x3e |has| PUSH\n    STACK --\x3e |has| POP\n    STACK --\x3e |has| I((items))\n    QUEUE((QUEUE)) --\x3e |has| I\n    DS((Data Structure)) --\x3e |learns| STACK\n    DS((Data Structure)) --\x3e |learns| QUEUE\n    style DS color:red\n    STACK --\x3e |is| LDT((Linear Data Structure))\n    QUEUE --\x3e |is| LDT\n    QUEUE --\x3e |has| EQ((Enqueue))\n    QUEUE --\x3e |has| DQ((Dequeue))\n    QUEUE --\x3e |implemented as| O\n    EQ --\x3e |is a| M\n    DQ --\x3e |is a| M\n    SETTER((Setter)) --\x3e |is a| M\n    SETTER --\x3e |modifies| ATTR\n    GETTER((Getter)) --\x3e |is a| M\n    GETTER --\x3e |access| ATTR\n    PROP((Property)) --\x3e |encapsulates| ATTR\n    PROP --\x3e |uses| GETTER\n    PROP --\x3e |uses| SETTER\n    PROP --\x3e |can be| COMP((computed))\n    PROP --\x3e |can be| STR((stored))\n    COMP --\x3e |has not| SETTER\n    COMP --\x3e |has| GETTER\n    STR --\x3e |has| GETTER\n    STR --\x3e |has| SETTER"}))}m.isMDXComponent=!0}}]);