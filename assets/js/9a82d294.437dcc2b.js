"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[4717],{4767:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=a(7462),i=(a(7294),a(3905)),r=a(505);const l={title:"Learning Objectives",description:"10.020 DDW LO",hide_table_of_contents:!1,sidebar_position:2},o=void 0,s={unversionedId:"learning-objectives",id:"learning-objectives",title:"Learning Objectives",description:"10.020 DDW LO",source:"@site/about/learning-objectives.md",sourceDirName:".",slug:"/learning-objectives",permalink:"/10020/about/learning-objectives",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Learning Objectives",description:"10.020 DDW LO",hide_table_of_contents:!1,sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"About",permalink:"/10020/about/intro"},next:{title:"DDW Chatbot",permalink:"/10020/about/chatbot"}},p={},m=[{value:"Week 1: Python (Concept Map)",id:"week-1-python-concept-map",level:2},{value:"Week 2: Analysing Programs (Concept Map)",id:"week-2-analysing-programs-concept-map",level:2},{value:"Week 3: Divide and Conquer (Concept Map)",id:"week-3-divide-and-conquer-concept-map",level:2},{value:"Week 4: Object-Oriented Paradigm (Concept Map)",id:"week-4-object-oriented-paradigm-concept-map",level:2},{value:"Week 5: Searching Data (Concept Map)",id:"week-5-searching-data-concept-map",level:2},{value:"Week 6: Inheritance and Object-Oriented Design (Concept Map)",id:"week-6-inheritance-and-object-oriented-design-concept-map",level:2},{value:"Week 8: Visualizing and Processing Data(Concept Map)",id:"week-8-visualizing-and-processing-dataconcept-map",level:2},{value:"Week 9: Modelling Continuous Data",id:"week-9-modelling-continuous-data",level:2},{value:"Week 10: Classifying Categorical Data",id:"week-10-classifying-categorical-data",level:2},{value:"Week 12: Design of State Machines",id:"week-12-design-of-state-machines",level:2}],k={toc:m},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.Z,{mdxType:"ChatBaseBubble"}),(0,i.kt)("h2",{id:"week-1-python-concept-map"},"Week 1: Python (",(0,i.kt)("a",{parentName:"h2",href:"https://drive.google.com/file/d/11dFasj8ePnDj0TPYWCRrrWckVQk21fjd/view?usp=sharing"},"Concept Map"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Apply Python's ",(0,i.kt)("strong",{parentName:"li"},"procedural")," programming and ",(0,i.kt)("strong",{parentName:"li"},"basic")," data structures"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Define")," and ",(0,i.kt)("strong",{parentName:"li"},"call")," functions"),(0,i.kt)("li",{parentName:"ul"},"Implement:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Bubble sort and"),(0,i.kt)("li",{parentName:"ul"},"Insertion sort algorithms to ",(0,i.kt)("strong",{parentName:"li"},"sort")," a sequence of number"))),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("strong",{parentName:"li"},"print")," statements to debug code")),(0,i.kt)("h2",{id:"week-2-analysing-programs-concept-map"},"Week 2: Analysing Programs (",(0,i.kt)("a",{parentName:"h2",href:"https://drive.google.com/file/d/1PV9-Pe3D1AXhs4pao_70KnF3xyNcNX0P/view?usp=sharing"},"Concept Map"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Write functions to do ",(0,i.kt)("strong",{parentName:"li"},"binary heap")," data structure operation"),(0,i.kt)("li",{parentName:"ul"},"Implement ",(0,i.kt)("strong",{parentName:"li"},"heapsort")," using iteration"),(0,i.kt)("li",{parentName:"ul"},"Define ",(0,i.kt)("strong",{parentName:"li"},"Big-O")," notation and other asymptotic notations"),(0,i.kt)("li",{parentName:"ul"},"Derive ",(0,i.kt)("strong",{parentName:"li"},"complexity")," of a code using its computation model"),(0,i.kt)("li",{parentName:"ul"},"Create ",(0,i.kt)("strong",{parentName:"li"},"plots")," from array data for ",(0,i.kt)("strong",{parentName:"li"},"visualising")," computational time"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Measure")," computation time for bubble sort, insertion sort, built-in sort, and heapsort")),(0,i.kt)("h2",{id:"week-3-divide-and-conquer-concept-map"},"Week 3: Divide and Conquer (",(0,i.kt)("a",{parentName:"h2",href:"https://drive.google.com/file/d/1TRve3OUUgiqjE8DvUDA4breOvj6pmqK2/view?usp=sharing"},"Concept Map"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Solve problems using ",(0,i.kt)("strong",{parentName:"li"},"recursion")),(0,i.kt)("li",{parentName:"ul"},"Identify problems that has recursive solutions"),(0,i.kt)("li",{parentName:"ul"},"Explain and implement ",(0,i.kt)("strong",{parentName:"li"},"merge sort")," algorithm"),(0,i.kt)("li",{parentName:"ul"},"Derive solution of ",(0,i.kt)("strong",{parentName:"li"},"recurrence")," of merge sort using recursion-tree method"),(0,i.kt)("li",{parentName:"ul"},"Measure computation time of merge sort and ",(0,i.kt)("strong",{parentName:"li"},"compare")," it with the other sort algorithms")),(0,i.kt)("h2",{id:"week-4-object-oriented-paradigm-concept-map"},"Week 4: Object-Oriented Paradigm (",(0,i.kt)("a",{parentName:"h2",href:"https://drive.google.com/file/d/1iLusuxa-wncnHcxOrRoX4207u07l18Nh/view?usp=sharing"},"Concept Map"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create ",(0,i.kt)("inlineCode",{parentName:"li"},"class")," definitions with initialization and other methods"),(0,i.kt)("li",{parentName:"ul"},"Create ",(0,i.kt)("strong",{parentName:"li"},"stored")," property and ",(0,i.kt)("strong",{parentName:"li"},"computed")," property"),(0,i.kt)("li",{parentName:"ul"},"Draw UML class diagram of a class with attributes and methods"),(0,i.kt)("li",{parentName:"ul"},"Explain ",(0,i.kt)("inlineCode",{parentName:"li"},"has-a")," relationship"),(0,i.kt)("li",{parentName:"ul"},"Discuss object ",(0,i.kt)("strong",{parentName:"li"},"aliasing")," and ",(0,i.kt)("strong",{parentName:"li"},"copying")),(0,i.kt)("li",{parentName:"ul"},"Draw UML class diagram for ",(0,i.kt)("inlineCode",{parentName:"li"},"has-a")," relationship"),(0,i.kt)("li",{parentName:"ul"},"Implement abstract data type for ",(0,i.kt)("strong",{parentName:"li"},"Stack"),", ",(0,i.kt)("strong",{parentName:"li"},"Queue")," using Object Oriented paradigm"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Apply")," Stack and Queue for some applications"),(0,i.kt)("li",{parentName:"ul"},"Implement Queue using double ",(0,i.kt)("strong",{parentName:"li"},"Stack")," and discuss implementation ",(0,i.kt)("strong",{parentName:"li"},"impact")," on computation time")),(0,i.kt)("h2",{id:"week-5-searching-data-concept-map"},"Week 5: Searching Data (",(0,i.kt)("a",{parentName:"h2",href:"https://drive.google.com/file/d/1B91OlTA0Ss2HLDxf_PJcS9O4GZPDRI9K/view?usp=sharing"},"Concept Map"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("strong",{parentName:"li"},"Dictionary")," to represent graph"),(0,i.kt)("li",{parentName:"ul"},"Apply ",(0,i.kt)("strong",{parentName:"li"},"basic")," dictionary operations"),(0,i.kt)("li",{parentName:"ul"},"Define ",(0,i.kt)("strong",{parentName:"li"},"graph"),", ",(0,i.kt)("strong",{parentName:"li"},"vertices"),", ",(0,i.kt)("strong",{parentName:"li"},"edges")," and ",(0,i.kt)("strong",{parentName:"li"},"weights")),(0,i.kt)("li",{parentName:"ul"},"Differentiate ",(0,i.kt)("strong",{parentName:"li"},"directed")," and ",(0,i.kt)("strong",{parentName:"li"},"undirected")," graphs"),(0,i.kt)("li",{parentName:"ul"},"Define ",(0,i.kt)("strong",{parentName:"li"},"paths")),(0,i.kt)("li",{parentName:"ul"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"Vertex")," class and a Graph class"),(0,i.kt)("li",{parentName:"ul"},"Represent graphs using ",(0,i.kt)("strong",{parentName:"li"},"adjacency-list")," representation or ",(0,i.kt)("strong",{parentName:"li"},"adjacency-matrix")," representation"),(0,i.kt)("li",{parentName:"ul"},"Explain and implement ",(0,i.kt)("strong",{parentName:"li"},"breadth")," first search"),(0,i.kt)("li",{parentName:"ul"},"Explain and implement ",(0,i.kt)("strong",{parentName:"li"},"depth")," first search")),(0,i.kt)("h2",{id:"week-6-inheritance-and-object-oriented-design-concept-map"},"Week 6: Inheritance and Object-Oriented Design (",(0,i.kt)("a",{parentName:"h2",href:"https://drive.google.com/file/d/1pkxE0M-V7uz_vteyBZsDotkL4sCkJj6b/view?usp=sharing"},"Concept Map"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inherit a class to create a ",(0,i.kt)("strong",{parentName:"li"},"child")," class"),(0,i.kt)("li",{parentName:"ul"},"Explain ",(0,i.kt)("inlineCode",{parentName:"li"},"is-a")," relationship"),(0,i.kt)("li",{parentName:"ul"},"Draw ",(0,i.kt)("strong",{parentName:"li"},"UML")," diagram for ",(0,i.kt)("inlineCode",{parentName:"li"},"is-a")," relationship"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Override")," operators to extend parent's methods"),(0,i.kt)("li",{parentName:"ul"},"Implement ",(0,i.kt)("strong",{parentName:"li"},"Deque")," data structure as a subclass of ",(0,i.kt)("strong",{parentName:"li"},"Queue")),(0,i.kt)("li",{parentName:"ul"},"Implement ",(0,i.kt)("strong",{parentName:"li"},"Array")," and ",(0,i.kt)("strong",{parentName:"li"},"Linked List")," data structure from the same base class")),(0,i.kt)("h2",{id:"week-8-visualizing-and-processing-dataconcept-map"},"Week 8: Visualizing and Processing Data(",(0,i.kt)("a",{parentName:"h2",href:"https://drive.google.com/file/d/1PUZkAsRJLcGxEfqDXC-QQlKa6TQu2oNO/view?usp=sharing"},"Concept Map"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create ",(0,i.kt)("strong",{parentName:"li"},"scatter")," plot and statistical plots like box plot, histogram, and bar plot"),(0,i.kt)("li",{parentName:"ul"},"Create a ",(0,i.kt)("strong",{parentName:"li"},"Panda's DataFrame")," and selecting data from DataFrame"),(0,i.kt)("li",{parentName:"ul"},"Using library to read ",(0,i.kt)("inlineCode",{parentName:"li"},"CSV")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"EXCEL")," file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Split")," data randomly into training set and testing set"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Normalize")," data using min-max normalization"),(0,i.kt)("li",{parentName:"ul"},"Give example of ",(0,i.kt)("strong",{parentName:"li"},"linear regression and classification"))),(0,i.kt)("h2",{id:"week-9-modelling-continuous-data"},"Week 9: Modelling Continuous Data"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Write ",(0,i.kt)("strong",{parentName:"li"},"objective")," function of linear regression"),(0,i.kt)("li",{parentName:"ul"},"Implement ",(0,i.kt)("strong",{parentName:"li"},"Gradient Descent algorithm")," for optimisation"),(0,i.kt)("li",{parentName:"ul"},"Train ",(0,i.kt)("strong",{parentName:"li"},"linear regression model")," using gradient descent"),(0,i.kt)("li",{parentName:"ul"},"Transform data for ",(0,i.kt)("strong",{parentName:"li"},"higher")," order features"),(0,i.kt)("li",{parentName:"ul"},"Evaluate linear regression model using ",(0,i.kt)("inlineCode",{parentName:"li"},"r^2")," and mean-squared-error"),(0,i.kt)("li",{parentName:"ul"},"Evaluate and choose ",(0,i.kt)("strong",{parentName:"li"},"learning rate")),(0,i.kt)("li",{parentName:"ul"},"Plot ",(0,i.kt)("strong",{parentName:"li"},"cost")," function over iteration time"),(0,i.kt)("li",{parentName:"ul"},"Plot ",(0,i.kt)("strong",{parentName:"li"},"linear")," regression")),(0,i.kt)("h2",{id:"week-10-classifying-categorical-data"},"Week 10: Classifying Categorical Data"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Write objective function of ",(0,i.kt)("strong",{parentName:"li"},"logistic")," regression"),(0,i.kt)("li",{parentName:"ul"},"Use logistic regression to ",(0,i.kt)("strong",{parentName:"li"},"calculate")," probabilities of binary classification"),(0,i.kt)("li",{parentName:"ul"},"Train logistic ",(0,i.kt)("strong",{parentName:"li"},"regression")," model"),(0,i.kt)("li",{parentName:"ul"},"Split data into ",(0,i.kt)("strong",{parentName:"li"},"training"),", ",(0,i.kt)("strong",{parentName:"li"},"validation"),", and ",(0,i.kt)("strong",{parentName:"li"},"testing")," set"),(0,i.kt)("li",{parentName:"ul"},"Visualize ",(0,i.kt)("strong",{parentName:"li"},"non-linear")," decision boundary"),(0,i.kt)("li",{parentName:"ul"},"Classify ",(0,i.kt)("strong",{parentName:"li"},"multi-class")," problems using one-vs-all technique"),(0,i.kt)("li",{parentName:"ul"},"Calculate ",(0,i.kt)("strong",{parentName:"li"},"confusion")," ",(0,i.kt)("strong",{parentName:"li"},"matrix"),", ",(0,i.kt)("strong",{parentName:"li"},"precision"),", and ",(0,i.kt)("strong",{parentName:"li"},"recall"))),(0,i.kt)("h2",{id:"week-12-design-of-state-machines"},"Week 12: Design of State Machines"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Define a ",(0,i.kt)("strong",{parentName:"li"},"state machine")),(0,i.kt)("li",{parentName:"ul"},"Implement an ",(0,i.kt)("strong",{parentName:"li"},"Abstract Base Class")," for State Machine using abc module"),(0,i.kt)("li",{parentName:"ul"},"Define ",(0,i.kt)("strong",{parentName:"li"},"output")," function and ",(0,i.kt)("strong",{parentName:"li"},"next")," state function"),(0,i.kt)("li",{parentName:"ul"},"Draw ",(0,i.kt)("strong",{parentName:"li"},"state transition diagram")," and ",(0,i.kt)("strong",{parentName:"li"},"time-step table")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Implement")," output function and next state function inside ",(0,i.kt)("inlineCode",{parentName:"li"},"get_next_values")," overridden method."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Apply")," breadth first search to perform state-space search")))}c.isMDXComponent=!0}}]);