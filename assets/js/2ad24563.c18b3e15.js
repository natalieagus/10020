"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[9115],{3983:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var n=a(7462),i=(a(7294),a(3905)),l=(a(1694),a(3707),a(6533)),r=a(505);const s={sidebar_position:1},o="SQLAlchemy",d={unversionedId:"advanced/database",id:"advanced/database",title:"SQLAlchemy",description:"SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.",source:"@site/projects/advanced/database.md",sourceDirName:"advanced",slug:"/advanced/database",permalink:"/2023/projects/advanced/database",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced",permalink:"/2023/projects/category/advanced"},next:{title:"Bootstrap",permalink:"/2023/projects/advanced/bootstrap"}},p={},h=[{value:"Pre-Requisite",id:"pre-requisite",level:3},{value:"Config File and db Object",id:"config-file-and-db-object",level:2},{value:"Model, View, and Controller",id:"model-view-and-controller",level:2},{value:"Models",id:"models",level:2},{value:"Tables in models.py",id:"tables-in-modelspy",level:2},{value:"References",id:"references",level:3},{value:"Querying the Database",id:"querying-the-database",level:2},{value:"Users and Hall of Fame Page - Querying All Entries",id:"users-and-hall-of-fame-page---querying-all-entries",level:3},{value:"Question and Challenge Pages - Adding Entry into Database",id:"question-and-challenge-pages---adding-entry-into-database",level:3},{value:"References",id:"references-1",level:3}],m={toc:h},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sqlalchemy"},"SQLAlchemy"),(0,i.kt)("p",null,"SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL."),(0,i.kt)(r.Z,{mdxType:"ChatBaseBubble"}),(0,i.kt)("h3",{id:"pre-requisite"},"Pre-Requisite"),(0,i.kt)("p",null,"This notes will explain some of the codes in mini project 2 that interacts with the database using SQLAlchemy and Flask. However, it is useful that you go through these two tutorials:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms"},"The Flask Mega-Tutorial Part III: Web Forms")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database"},"Flask Mega Tutorial Part IV: Database"))),(0,i.kt)("p",null,"We will not explain the explanation that is already written in that tutorial."),(0,i.kt)("h2",{id:"config-file-and-db-object"},"Config File and db Object"),(0,i.kt)("p",null,"One change from the previous mini project is the present of ",(0,i.kt)("inlineCode",{parentName:"p"},"config.py")," in the root folder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import os\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'very-secret-key'\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or\\\n        'sqlite:///' + os.path.join(basedir, 'app.db')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n")),(0,i.kt)("p",null,"This configuration file is needed by SQLAlchemy. The way it is written is as a class ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),". This class is imported inside ",(0,i.kt)("inlineCode",{parentName:"p"},"app/__init__.py"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from flask import Flask\nfrom config import Config\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\napplication = Flask(__name__)\napplication.config.from_object(Config)\ndb = SQLAlchemy(application)\nmigrate = Migrate(application, db)\n")),(0,i.kt)("p",null,"Notice that after we create the Flask application called ",(0,i.kt)("inlineCode",{parentName:"p"},"application"),", we call ",(0,i.kt)("inlineCode",{parentName:"p"},"application.config.from_object(Config)"),"."),(0,i.kt)("p",null,"After the configuration, we can then create the ",(0,i.kt)("inlineCode",{parentName:"p"},"SQLAlchemy")," instance from ",(0,i.kt)("inlineCode",{parentName:"p"},"application")," and assign the name ",(0,i.kt)("inlineCode",{parentName:"p"},"db"),". We will use this ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," object instance when we interact with the database in our Python code."),(0,i.kt)("p",null,"The last line is for convenient purpose as we use Flask-Migrate package to migrate the database whenever we change our model or table."),(0,i.kt)("h2",{id:"model-view-and-controller"},"Model, View, and Controller"),(0,i.kt)("p",null,"Flask allows you to write your project using ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"},"Model-View-Controller (MVC)")," software design pattern."),(0,i.kt)(l.Z,{path:"https://www.dropbox.com/s/1akl7cvoejwenpc/400px-MVC-Process.png?raw=1",widthPercentage:"30%",mdxType:"ImageCard"}),(0,i.kt)("p",null,"In using MVC design pattern, we separate our codes into three main components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Model: is the main component of the pattern containing the data structures. The model should be independent of the user interface."),(0,i.kt)("li",{parentName:"ul"},"View: is what the user sees and represents information to the user."),(0,i.kt)("li",{parentName:"ul"},"Controller: is what manipulates the data based on the user interaction with the user interface.")),(0,i.kt)("p",null,"In our mini project, we have the following files where we write all these components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"models.py"),": contains our model which defines all the table in our SQL database."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"templates")," folder: contains all the HTML files that provide the views to the users."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routes.py"),": contains the view controllers. Some view controllers interact with the model.")),(0,i.kt)("h2",{id:"models"},"Models"),(0,i.kt)("p",null,"Our database tables have the following relationships:"),(0,i.kt)(l.Z,{path:"https://www.dropbox.com/s/6gb6nvaujsvevab/models_diagram.png?raw=1",widthPercentage:"50%",mdxType:"ImageCard"}),(0,i.kt)("p",null,"You may want to look into this diagram and open ",(0,i.kt)("inlineCode",{parentName:"p"},"models.py")," at the same time."),(0,i.kt)("h2",{id:"tables-in-modelspy"},"Tables in models.py"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," class in ",(0,i.kt)("inlineCode",{parentName:"p"},"models.py")," has ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password_hash")," as its attributes. In our code, we name this table with a lowercase name ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," table. The table ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," has one-to-many relationship with the ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," table. Every question has an author of that question."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class User(UserMixin, db.Model):\n    __tablename__ = 'user'\n    id = db.Column(db.Integer,\n                   primary_key=True)\n    username = db.Column(db.String(64),\n                         index=True,\n                         unique=True)\n    password_hash = db.Column(db.String(128))\n    questions = db.relationship('Question',\n                                backref='from_user',\n                                lazy='dynamic')\n    challenges = db.relationship('Challenge',\n                                 secondary=association_table,\n                                 backref=db.backref('to_user'),\n                                 lazy='dynamic')\n    records = db.relationship('TimeRecord',\n                              backref=db.backref('user_challenge'),\n                              lazy='dynamic')\n\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," table has many-to-many relationship with the ",(0,i.kt)("inlineCode",{parentName:"p"},"challenge")," table through the ",(0,i.kt)("inlineCode",{parentName:"p"},"association")," table. This means that one user can have many challenges and one challenge can be sent to many users."),(0,i.kt)("p",null,"When a user attempt one challenge, it will be recorded inside ",(0,i.kt)("inlineCode",{parentName:"p"},"timerecord")," table. Each entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"timerecord")," table contains information of which challenge and who the user who submitted the answer. It also records the ",(0,i.kt)("inlineCode",{parentName:"p"},"elapsed_time"),"."),(0,i.kt)("p",null,"When a user creates a question, it has to fill in the ",(0,i.kt)("inlineCode",{parentName:"p"},"expression")," field. The server then calculates the ",(0,i.kt)("inlineCode",{parentName:"p"},"answer")," using your ",(0,i.kt)("inlineCode",{parentName:"p"},"EvaluateExpression")," class which is part of your Exercise 2. Moreover, a user chooses another users to create a challenge for them and so it creates one entry in the ",(0,i.kt)("inlineCode",{parentName:"p"},"challenge")," table. This means that ",(0,i.kt)("inlineCode",{parentName:"p"},"question")," table and ",(0,i.kt)("inlineCode",{parentName:"p"},"challenge")," table has a one-to-one relationship."),(0,i.kt)("p",null,"For one challenge, different users may attempt to answer and creates different ",(0,i.kt)("inlineCode",{parentName:"p"},"timerecord")," entries. The same user can attempt it several times as well. This means that the ",(0,i.kt)("inlineCode",{parentName:"p"},"challenge")," table has a one-to-many relationship with the ",(0,i.kt)("inlineCode",{parentName:"p"},"timerecord")," table since one challenge can have many records for the submissions."),(0,i.kt)("p",null,"See ",(0,i.kt)("inlineCode",{parentName:"p"},"models.py")," and refer to the following documentations in the References to understand the rest of the codes."),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.sqlalchemy.org/en/13/orm/basic_relationships.html"},"SQLAlchemy Basic Relationship")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database"},"The Flask Mega-Tutorial Part IV: Database"))),(0,i.kt)("h2",{id:"querying-the-database"},"Querying the Database"),(0,i.kt)("p",null,"We will explain how we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," object inside ",(0,i.kt)("inlineCode",{parentName:"p"},"app/routes.py"),"."),(0,i.kt)("h3",{id:"users-and-hall-of-fame-page---querying-all-entries"},"Users and Hall of Fame Page - Querying All Entries"),(0,i.kt)("p",null,"The controller for the Users page is defined inside ",(0,i.kt)("inlineCode",{parentName:"p"},"users()")," function in ",(0,i.kt)("inlineCode",{parentName:"p"},"routes.py"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def users():\n    users = User.query.all()\n    mergesort(users, lambda item: item.username)\n    usernames = [u.username for u in users]\n    return render_template('users.html', title='Users',\n                            users=usernames)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first line uses the class ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," defined in ",(0,i.kt)("inlineCode",{parentName:"li"},"models.py"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," is an instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"db.Model")," which has a ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," object as its attribute. This ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," object has a method ",(0,i.kt)("inlineCode",{parentName:"li"},"all()"),". What this line does is to query the ",(0,i.kt)("inlineCode",{parentName:"li"},"user")," table and retrieve all its entries."),(0,i.kt)("li",{parentName:"ul"},"In the second and third line, we actually use the ",(0,i.kt)("inlineCode",{parentName:"li"},"username")," attribute of the ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," object. Recall in ",(0,i.kt)("inlineCode",{parentName:"li"},"models.py")," that ",(0,i.kt)("inlineCode",{parentName:"li"},"username")," is one of the attributes defined in the class ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),".")),(0,i.kt)("p",null,"Similarly, we can see a similar code to query all entries in the Hall of Fame page. You can check the function ",(0,i.kt)("inlineCode",{parentName:"p"},"halloffame()")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"routes.py"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def halloffame():\n    challenges = Challenge.query.all()\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The above line retrieves all the challenges in the ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge")," table.")),(0,i.kt)("h3",{id:"question-and-challenge-pages---adding-entry-into-database"},"Question and Challenge Pages - Adding Entry into Database"),(0,i.kt)("p",null,"Let's go to the controller for the Question page. This allows user to create a question and store it into the database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def questions():\n    questions = current_user.questions.all()\n    ...\n    users = User.query.all()\n    userlist = [(u.username, u.username) for u in users]\n    ...\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In the first line, the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"current_user")," contains the ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," object which is logged into the page. If you refer to ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," class definition in ",(0,i.kt)("inlineCode",{parentName:"li"},"models.py")," you will see a ",(0,i.kt)("inlineCode",{parentName:"li"},"questions")," field being defined. Accessing this attribute gives you a query object that allows you to access the ",(0,i.kt)("inlineCode",{parentName:"li"},"question")," table for that user. Since a ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," object has a method ",(0,i.kt)("inlineCode",{parentName:"li"},"all()")," you can use it to get all the questions created by the current user."),(0,i.kt)("li",{parentName:"ul"},"The second and third lines are similar to the Users page where we retrieve all the users and their usernames from the ",(0,i.kt)("inlineCode",{parentName:"li"},"user")," table.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"if form.validate_on_submit():\n        question = Question(expression=form.expression.data)\n        evalans = EvaluateExpression(form.expression.data)\n        question.answer = evalans.evaluate()\n        question.author = current_user.id\n        challenge = Challenge(question=question)\n        username_to = []\n        for name in form.assign_to.data:\n            username_to.append(User.query.filter_by(username=name).first())\n\n        challenge.to_user = username_to\n        db.session.add(question)\n        db.session.add(challenge)\n        db.session.commit()\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When the user submit the question by clicking the submit button, the value of ",(0,i.kt)("inlineCode",{parentName:"li"},"form.validate_on_submit()")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,i.kt)("li",{parentName:"ul"},"Upon submission, we want to create a new entry into the ",(0,i.kt)("inlineCode",{parentName:"li"},"question")," table."),(0,i.kt)("li",{parentName:"ul"},"To create a new entry, we first create a new object instance: ",(0,i.kt)("inlineCode",{parentName:"li"},"question = Question(expression=form.expression.data)")," where we initialize the ",(0,i.kt)("inlineCode",{parentName:"li"},"expression")," with the string entered by the user in the form."),(0,i.kt)("li",{parentName:"ul"},"We then create the object instance for ",(0,i.kt)("inlineCode",{parentName:"li"},"EvaluateExpression")," so that we can call its ",(0,i.kt)("inlineCode",{parentName:"li"},"evaluate()")," method. This will give us the answer which we set here: ",(0,i.kt)("inlineCode",{parentName:"li"},"question.answer = evalans.evaluate()"),"."),(0,i.kt)("li",{parentName:"ul"},"We also want to create another record in the ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge")," table. Therefore, we create the instance: ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge = Challenge(question=question)"),". We set the ",(0,i.kt)("inlineCode",{parentName:"li"},"question")," field in the ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge")," table with the newly created ",(0,i.kt)("inlineCode",{parentName:"li"},"question"),"."),(0,i.kt)("li",{parentName:"ul"},"The next few lines reads the names chosen in the field where the challenge is to be sent to and retrieve the ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," object based on the ",(0,i.kt)("inlineCode",{parentName:"li"},"username"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"User.query.filter_by(username=name).first()"),". Note that the ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," object has another method called ",(0,i.kt)("inlineCode",{parentName:"li"},"filter_by()")," which can be used to retrieve the records based on certain filter conditions. The ",(0,i.kt)("inlineCode",{parentName:"li"},"first()")," method returns the first ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," object found by the query that matches the filter condition."),(0,i.kt)("li",{parentName:"ul"},"To modify the database, we have to add a ",(0,i.kt)("inlineCode",{parentName:"li"},"session")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"commit()")," them. This is shown in the last three lines where we add a new entry to the ",(0,i.kt)("inlineCode",{parentName:"li"},"question")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge")," table and call ",(0,i.kt)("inlineCode",{parentName:"li"},"commit()"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"db.session.add(question)\ndb.session.add(challenge)\ndb.session.commit()\n")),(0,i.kt)("p",null,"We can see similar things inside the Challenge page controller in ",(0,i.kt)("inlineCode",{parentName:"p"},"challenge()")," function inside ",(0,i.kt)("inlineCode",{parentName:"p"},"routes.py"),". When a user submit an anwer, the following code will be executed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"    if form.validate_on_submit():\n        record = TimeRecord()\n        record.elapsed_time = int(form.elapsed_time.data)\n        record.challenge_id = int(form.challenge_id.data)\n        record.user_id = current_user.id\n        answer = form.answer.data\n        challenge = Challenge.query.filter_by(id=form.challenge_id.data).first()\n        if int(answer) == int(challenge.question.answer):\n            db.session.add(record)\n            db.session.commit()\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first line creates a ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeRecord")," object after a user submit an answer."),(0,i.kt)("li",{parentName:"ul"},"The second and third lines initialize the ",(0,i.kt)("inlineCode",{parentName:"li"},"elapsed_time")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge_id")," attributes of the ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeRecord")," object from the data in the submitted form. The next line initialize the ",(0,i.kt)("inlineCode",{parentName:"li"},"user_id")," attribute using the ",(0,i.kt)("inlineCode",{parentName:"li"},"current_user")," object's ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),"."),(0,i.kt)("li",{parentName:"ul"},"We then want to check if the answer is correct. So it retrieves the answer submitted by the user, i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},"answer = form.answer.data"),", with the one from the database."),(0,i.kt)("li",{parentName:"ul"},"We get the answer fro the database by first finding the entry in the ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge")," table that matches the ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge_id"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Challenge.query.filter_by(id=form.challenge_id.data).first()"),"."),(0,i.kt)("li",{parentName:"ul"},"Since every entry in ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge")," id table is associated with an entry in the ",(0,i.kt)("inlineCode",{parentName:"li"},"question")," table, we can access the questions' answer using: ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge.question.answer"),"."),(0,i.kt)("li",{parentName:"ul"},"The last two lines above add the ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeRecord")," object into the database.")),(0,i.kt)("h3",{id:"references-1"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.sqlalchemy.org/en/13/orm/query.html"},"Query API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.sqlalchemy.org/en/13/orm/session_basics.html"},"Session Basics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms"},"The Flask Mega-Tutorial Part III: Web Forms")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database"},"Flask MegaTutorial Part IV: Database"))))}c.isMDXComponent=!0}}]);