"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[3925],{7991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=(n(1694),n(3707),n(6533),n(505));const o={sidebar_position:1},s="Week 1: Python",l={unversionedId:"learning-objectives/python",id:"learning-objectives/python",title:"Week 1: Python",description:"- Apply Python's procedural programming and basic data structures",source:"@site/about/learning-objectives/01-python.md",sourceDirName:"learning-objectives",slug:"/learning-objectives/python",permalink:"/10020/about/learning-objectives/python",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Learning Objectives",permalink:"/10020/about/category/learning-objectives"},next:{title:"Week 2: Analysing Programs",permalink:"/10020/about/learning-objectives/analysing-programs"}},u={},p=[{value:"Concept Map",id:"concept-map",level:3}],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"week-1-python"},"Week 1: Python"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Apply Python's ",(0,a.kt)("strong",{parentName:"li"},"procedural")," programming and ",(0,a.kt)("strong",{parentName:"li"},"basic")," data structures"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Define")," and ",(0,a.kt)("strong",{parentName:"li"},"call")," functions"),(0,a.kt)("li",{parentName:"ul"},"Implement:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Bubble sort and"),(0,a.kt)("li",{parentName:"ul"},"Insertion sort algorithms to ",(0,a.kt)("strong",{parentName:"li"},"sort")," a sequence of number"))),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("strong",{parentName:"li"},"print")," statements to debug code")),(0,a.kt)(i.Z,{mdxType:"ChatBaseBubble"}),(0,a.kt)("h3",{id:"concept-map"},"Concept Map"),(0,a.kt)("mermaid",{value:"flowchart TD\n    A((Week 1 Sorting Algorithm)) --\x3e |requires| B((Identifying<br>input and output))\n    A --\x3e |write| C((user-defined<br> function))\n    A --\x3e |learns| D((Bubble sort))\n    D --\x3e |requires| E((Counting))\n    D --\x3e |swap| G((Elements))\n    E --\x3e |using| F((Compound Operator))\n    A --\x3e |learns| H((Insertion Sort))\n    H --\x3e |swap| G\n    A --\x3e |write| K((if-statement))\n    A --\x3e |traversing| PY((Python's list))\n    C --\x3e |write| C1((function defintion))\n    C --\x3e |write| C2((function call))\n    C1 --\x3e |uses| C11((local variables))\n    C1 --\x3e |specify| C12((return values))\n    PY --\x3e |determine| PY1((length))\n    PY --\x3e |access| G\n    K --\x3e |compare| G\n    K --\x3e |uses| K1((relational<br> operators))\n    K --\x3e |uses| K2((boolean<br> operators))\n    PY --\x3e |write| PY2((for-loop))\n    PY --\x3e |write| PY3((while-loop))\n    PY3 --\x3e |uses| PY31((boolean values))\n    PY2 --\x3e |using| PY21((range))\n    PY2 --\x3e |write| PY22((nested))\n    PY22 --\x3e |determines which to use| PY221((index))\n    L((generating<br>random integer)) --\x3e |requires| L1((import))\n    L --\x3e |calls| L2((built-in<br>function))\n    L --\x3e |uses| C\n    L --\x3e |returns| PY\n    PY21 --\x3e |uses| L\n\n\n"}))}d.isMDXComponent=!0}}]);