"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[755],{2989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905)),o=(t(1694),t(3707),t(6533),t(505));const a={sidebar_position:3},s="Week 3: Divide and Conquer",l={unversionedId:"learning-objectives/divide-conquer",id:"learning-objectives/divide-conquer",title:"Week 3: Divide and Conquer",description:"- Solve problems using recursion",source:"@site/about/learning-objectives/03-divide-conquer.md",sourceDirName:"learning-objectives",slug:"/learning-objectives/divide-conquer",permalink:"/10020/about/learning-objectives/divide-conquer",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Week 2: Analysing Programs",permalink:"/10020/about/learning-objectives/analysing-programs"},next:{title:"Week 4: OOP",permalink:"/10020/about/learning-objectives/oop"}},u={},c=[{value:"Concept Map",id:"concept-map",level:3}],p={toc:c},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"week-3-divide-and-conquer"},"Week 3: Divide and Conquer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Solve problems using ",(0,i.kt)("strong",{parentName:"li"},"recursion")),(0,i.kt)("li",{parentName:"ul"},"Identify problems that has recursive solutions"),(0,i.kt)("li",{parentName:"ul"},"Explain and implement ",(0,i.kt)("strong",{parentName:"li"},"merge sort")," algorithm"),(0,i.kt)("li",{parentName:"ul"},"Derive solution of ",(0,i.kt)("strong",{parentName:"li"},"recurrence")," of merge sort using recursion-tree method"),(0,i.kt)("li",{parentName:"ul"},"Measure computation time of merge sort and ",(0,i.kt)("strong",{parentName:"li"},"compare")," it with the other sort algorithms")),(0,i.kt)(o.Z,{mdxType:"ChatBaseBubble"}),(0,i.kt)("h3",{id:"concept-map"},"Concept Map"),(0,i.kt)("mermaid",{value:"flowchart TD\n    A((Week 3<br>Recursion and Mergesort)) --\x3e |learns| ALGO((Algorithm))\n    ALGO --\x3e |learns| C((Complexity))\n    ALGO --\x3e |learns| R((Recursion))\n    ALGO --\x3e |learns| S((Sorting))\n    C  --\x3e |computes| CT((Computational Time))\n    R --\x3e |may use| HF((Helper Function))\n    R --\x3e |has| CS((cases))\n    S --\x3e |learns| MS((Mergesort))\n    CT --\x3e |draw| RT((Recursive Tree))\n    CT --\x3e |is| EXP((exponential))\n    CT --\x3e |is| LL((Log Linear))\n    MS --\x3e |uses| R\n    CS --\x3e |uses| IE((if-else))\n    CS --\x3e |has| BASE((base))\n    CS --\x3e |is| REC((recursive))\n    RT --\x3e |for| TOH((Tower of Hanoi))\n    RT --\x3e |for| MS\n    LL --\x3e |for| MS\n    TOH --\x3e |uses| R\n    CT --\x3e |for| R"}))}d.isMDXComponent=!0}}]);