"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[784],{6031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905)),i=(t(1694),t(3707),t(6533),t(505));const o={sidebar_position:2},s="Week 2: Analysing Programs",l={unversionedId:"learning-objectives/analysing-programs",id:"learning-objectives/analysing-programs",title:"Week 2: Analysing Programs",description:"- Write functions to do binary heap data structure operation",source:"@site/about/learning-objectives/02-analysing-programs.md",sourceDirName:"learning-objectives",slug:"/learning-objectives/analysing-programs",permalink:"/10020/about/learning-objectives/analysing-programs",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Week 1: Python",permalink:"/10020/about/learning-objectives/python"},next:{title:"Week 3: Divide and Conquer",permalink:"/10020/about/learning-objectives/divide-conquer"}},p={},c=[{value:"Concept Map",id:"concept-map",level:3}],u={toc:c},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"week-2-analysing-programs"},"Week 2: Analysing Programs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Write functions to do ",(0,r.kt)("strong",{parentName:"li"},"binary heap")," data structure operation"),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("strong",{parentName:"li"},"heapsort")," using iteration"),(0,r.kt)("li",{parentName:"ul"},"Define ",(0,r.kt)("strong",{parentName:"li"},"Big-O")," notation and other asymptotic notations"),(0,r.kt)("li",{parentName:"ul"},"Derive ",(0,r.kt)("strong",{parentName:"li"},"complexity")," of a code using its computation model"),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("strong",{parentName:"li"},"plots")," from array data for ",(0,r.kt)("strong",{parentName:"li"},"visualising")," computational time"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Measure")," computation time for bubble sort, insertion sort, built-in sort, and heapsort")),(0,r.kt)(i.Z,{mdxType:"ChatBaseBubble"}),(0,r.kt)("h3",{id:"concept-map"},"Concept Map"),(0,r.kt)("mermaid",{value:"flowchart TD\n    A((Week 2<br>Heap and Complexity)) --\x3e |learns| DS((Data Structure))\n    A --\x3e |learns| AL((Algorithm))\n    A --\x3e |learns| C((Complexity))\n    style DS color:red\n    style AL color:red\n    style C color:red\n    C --\x3e |learns| AN((Asymptotic<br>Notation))\n    C --\x3e |analyze| HS((Heapsort))\n    style HS color:dodgerblue\n    C --\x3e |describes| CT((Computation<br>Time))\n    style CT color:dodgerblue\n    C --\x3e |uses| CM((Computational<br>Model))\n    AL --\x3e |learns| HS\n    AL --\x3e |implements| BH((Build Heap))\n    AL --\x3e |implements| H((Heapify))\n    DS --\x3e |learns| BINH((Binary Heap))\n    style BINH color:dodgerblue\n    BINH --\x3e |specific case of| BT((Binary Tree))\n    BINH --\x3e |uses| L((List))\n    BINH --\x3e |access| N((Node))\n    BINH --\x3e |maintains| HPROP((Heap Property))\n    BINH --\x3e |is used in| HS\n    BINH --\x3e |process| BH\n    BT --\x3e |specific case of| TR((Tree))\n    BT --\x3e |has two| CHLD((Children))\n    N --\x3e |access| PR((Parent))\n    N --\x3e |access| CHLD\n    TR --\x3e |has| LF((Leaf))\n    TR --\x3e |has| RT((Root))\n    RT --\x3e |is-a| N\n    LF --\x3e |is-a| N\n    LF --\x3e |has no| CHLD\n    CHLD --\x3e |access| LTCD((Left Child))\n    CHLD --\x3e |access| RTCD((Right Child))\n    HPROP --\x3e |uses| HY((Heapify))\n    BH --\x3e |uses| HY\n    AL --\x3e |implements| HY\n    AN --\x3e |defines| BGONN((Big-O Notation))\n    BGONN --\x3e |derive for| HS\n    BGONN --\x3e |derive for| BEST((Bubble Sort))\n    BGONN --\x3e |derive for| INST((Insertion Sort))\n    HS --\x3e |runs| LL((log linear))\n    CT --\x3e |for| HS\n    CM --\x3e |derive| CT\n    CT --\x3e |can be| LL\n    CT --\x3e |can be| LC((Logarithmic))\n    CT --\x3e |can be| LR((Linear))\n    LC --\x3e |faster than| LR\n    LR --\x3e |faster than| LL\n    LL --\x3e |faster than| QC((Quadratic))\n    BEST --\x3e |runs| QC\n    CT --\x3e |for| BEST\n    INST --\x3e |runs| QC\n    CT --\x3e |can be| QUBIC((Qubic))\n    QC --\x3e |faster than| QUBIC\n    QUBIC --\x3e |faster than| EXP((Exponential))"}))}d.isMDXComponent=!0}}]);